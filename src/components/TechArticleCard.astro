---
const ARTICLE_LIMIT = 5;

type TechArticle = {
	title: string,
	link: string,
}
type TechArticleMedium = {
	name: string,
	link: string,
	items: TechArticle[],
}

// ↓最新のPublickeyの記事を取得
type PublicKeyArticle = {
	title: string,
	pubDate: Date,
	link: string,
	guid: string,
	author: string,
	thumbnail: string,
	description: string,
	content: string,
	enclosure: {},
	categories: string[],
};
let slicedPublickeyArticles: TechArticle[] = [];
try {
	const latestPublickeyArticles = (await(await fetch(`https://api.rss2json.com/v1/api.json?rss_url=https://www.publickey1.jp/atom.xml&api_key=${import.meta.env.RSS_2_JSON_API_KEY}`)).json()).items;
	slicedPublickeyArticles = latestPublickeyArticles.slice(0, ARTICLE_LIMIT).map((article: PublicKeyArticle) => {
		return {
			title: article.title,
			link: article.link,
		}
	});
} catch(e) {
	slicedPublickeyArticles  = [];
}
const publickeyMedium: TechArticleMedium = {
	name: "Publickey",
	link: "https://www.publickey1.jp/",
	items: slicedPublickeyArticles,
}
// ↑最新のPublickeyの記事を取得

// ↓Zennのトレンド記事を取得
type ZennArticle = {
	id: number,
	post_type: string,
	title: string,
	slug: string,
	comments_count: number,
	liked_count: number,
	body_letters_count: number,
	article_type: number,
	emoji: string,
	is_suspending_private: boolean,
	published_at: string,
	body_updated_at: string,
	source_repo_updated_at: Date | null,
	pinned: boolean,
	path: string,
	user: {}[],
	publication: Date | null,
};
let slicedZennArticles: TechArticle[] = [];
try {
	const trendZennArticles = (await(await fetch('https://zenn.dev/api/articles/')).json()).articles;
	slicedZennArticles = trendZennArticles.slice(0, ARTICLE_LIMIT).map((article: ZennArticle) => {
		return {
			title: article.title,
			link: `https://zenn.dev${article.path}`,
		}
	});
} catch(e) {
	slicedZennArticles = [];
}
const zennMedium: TechArticleMedium = {
	name: "Zenn",
	link: "https://www.publickey1.jp/",
	items: slicedZennArticles,
}
// ↑Zennのトレンド記事を取得

// ↓最新のQiitaの記事を取得
type QiitaArticle = {
	title: string,
	pubDate: Date,
	link: string,
	guid: string,
	author: string,
	thumbnail: string,
	description: string,
	content: string,
	enclosure: {},
	categories: string[],
};
let slicedQiitaArticles: TechArticle[] = [];
try {
	const latestQiitaArticles = (await(await fetch(`https://api.rss2json.com/v1/api.json?rss_url=https://qiita.com/popular-items/feed&api_key=${import.meta.env.RSS_2_JSON_API_KEY}`)).json()).items;
	slicedQiitaArticles = latestQiitaArticles.slice(0, ARTICLE_LIMIT).map((article: QiitaArticle) => {
		return {
			title: article.title,
			link: article.link,
		}
	});
} catch(e) {
	slicedQiitaArticles = [];
}
const qiitaMedium: TechArticleMedium = {
	name: "Qiita",
	link: "https://qiita.com/",
	items: slicedQiitaArticles,
}
// ↑最新のQiitaの記事を取得

// ↓最新のHattenaの記事を取得
type HatenArticle = {
	title: string,
	pubDate: Date,
	link: string,
	guid: string,
	author: string,
	thumbnail: string,
	description: string,
	content: string,
	enclosure: {},
	categories: string[],
};
let slicedHatenaArticles: TechArticle[] = [];
try {
	const latestHatenaArticles = (await(await fetch(`https://api.rss2json.com/v1/api.json?rss_url=https://b.hatena.ne.jp/hotentry/it.rss&api_key=${import.meta.env.RSS_2_JSON_API_KEY}`)).json()).items;
	slicedHatenaArticles = latestHatenaArticles.slice(0, ARTICLE_LIMIT).map((article: HatenArticle) => {
		return {
			title: article.title,
			link: article.link,
		}
	});
} catch(e) {
	slicedHatenaArticles = [];
}
const hatenaMedium: TechArticleMedium = {
	name: "はてな",
	link: "https://b.hatena.ne.jp/hotentry/it",
	items: slicedHatenaArticles,
}
// ↑最新のHatetnaの記事を取得

// ↓最新のITmediaの記事を取得
type ItMediaArticle = {
	title: string,
	pubDate: Date,
	link: string,
	guid: string,
	author: string,
	thumbnail: string,
	description: string,
	content: string,
	enclosure: {},
	categories: string[],
};
let slicedItMediaArticles: TechArticle[] = [];
try {
	const latestItMediaArticles = (await(await fetch(`https://api.rss2json.com/v1/api.json?rss_url=https://rss.itmedia.co.jp/rss/2.0/topstory.xml&api_key=${import.meta.env.RSS_2_JSON_API_KEY}`)).json()).items;
	slicedItMediaArticles = latestItMediaArticles.slice(0, ARTICLE_LIMIT).map((article: ItMediaArticle) => {
		return {
			title: article.title,
			link: article.link,
		}
	});
} catch(e) {
	slicedItMediaArticles = [];
}
const itMediaMedium: TechArticleMedium = {
	name: "ITmedia",
	link: "https://www.itmedia.co.jp/",
	items: slicedItMediaArticles,
}
// ↑最新のITmediaの記事を取得

// 全ての媒体をまとめて格納
const techArticleMedia: TechArticleMedium[] = [
	publickeyMedium,
	zennMedium,
	qiitaMedium,
	hatenaMedium,
	itMediaMedium
];
---

<!-- 媒体毎にループを回す -->
{techArticleMedia.map((medium) => (
	<ol class="tech-article-list">
		<div class="medium-name"><a href={medium.link} target="_blank">{medium.name}</a></div>
	{/* 媒体内の記事毎にループを回す */}
	{medium.items.map((item) => (
		<li class="tech-article-card">
			<a href={item.link} target="_blank">{item.title}</a>
		</li>
	))}
	</ol>
))}

<style>
	.tech-article-list {
		background-color: rgb(216, 224, 231);
		color: black;
		border-radius: 15px;
		padding-top: 9px;
		padding-bottom: 14px;
		padding-right: 12px;
	}
	.medium-name {
		font-weight: bold;
		padding-top: 5px;
		padding-bottom: 5px;
		font-size: 20px;
	}
	.tech-article-card {
		padding-bottom: 2px;
		font-size: 17px;
	}
	a {
		text-decoration: none;
		color: inherit;
	}
	a:hover {
		color: rgb(102, 102, 234);
	}
</style>
