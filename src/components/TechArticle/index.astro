---
import { type TechArticle } from './types/techArticle';
type TechArticleMedium = {
	name: string,
	link: string,
	items: TechArticle[],
}

// TODO: メディアが増えたときに対応できるようにしたい
import { getPublickeyMedium } from './feeds/publickey';
const publickeyMedium = await getPublickeyMedium();

import { getZennMedium } from './apis/zenn';
const zennMedium = await getZennMedium();

import { getQiitaMedium } from './feeds/qiita';
const qiitaMedium = await getQiitaMedium();

import { getHatenaMedium } from './feeds/hatena';
const hatenaMedium = await getHatenaMedium();

import { getItMediaMedium } from './feeds/itmedia';
const itMediaMedium = await getItMediaMedium();

import { getGgenMedium } from './feeds/ggen';
const ggenMedium = await getGgenMedium();

const techArticleMedia: TechArticleMedium[] = [
	publickeyMedium,
	zennMedium,
	qiitaMedium,
	hatenaMedium,
	itMediaMedium,
	ggenMedium,
];

// NOTE: 記事数が0の媒体は除外する
const filteredTechArticleMedia = techArticleMedia.filter((techArticleMedium: TechArticleMedium) => {
	return techArticleMedium.items.length > 0;
});
---

<h2>技術記事</h2>
<!-- 媒体毎にループを回す -->
{filteredTechArticleMedia.map((medium) => (
	<ol class="tech-article-list">
		<div class="medium-name"><a href={medium.link} target="_blank">{medium.name}</a></div>
	{/* 媒体内の記事毎にループを回す */}
	{medium.items.map((item) => (
		<li class="tech-article-card">
			<a href={item.link} target="_blank">{item.title}</a>
			<p>{item.summarizedBody}</p>
		</li>
	))}
	</ol>
))}

<style>
	.tech-article-list {
		background-color: rgb(216, 224, 231);
		color: black;
		border-radius: 10px;
		padding-top: 10px;
		padding-bottom: 15px;
		padding-right: 14px;
	}
	.medium-name {
		font-weight: bold;
		padding-top: 5px;
		padding-bottom: 5px;
		font-size: 20px;
	}
	.tech-article-card {
		padding-bottom: 2px;
		font-size: 17px;
	}
	.tech-article-card p {
		font-size: 15px;
		color: rgb(55, 52, 52);
		margin-top: 2px;
		margin-bottom: 6px;
	}
	a {
		text-decoration: none;
		color: inherit;
	}
	a:hover {
		color: rgb(102, 102, 234);
	}
</style>
